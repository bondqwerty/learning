#Flask - микрофреймворк для создание веб сайтов. 

#Фреймворк составная часть программного обеспечения сервера на который приходит запрос от клиента. 

#WSGI (Web Server Gateway Interface) - стандарт взаимодействия между python программой и веб-сервером. 

from flask import Flask, render_template #импорт класса фласк, который формирует wsgi приложение
app = Flask(__name__) #создаем экземпляр этого класса и указываем первым аргементом имя приложения. Если вся программа пишется в одном файле, то удобно передать директиву

@app.route("/index")
@app.route("/") #используем декоратор route, в котором указываем url адрес по которому будет отрабатывать отработчик в виде функции ниже
def index():
	return render_template('index.html', title="Про Flask") #браузер в ответ на url адрес "/" получит строку "index"
#/ - адрес главной страницы

@app.route("/about") #используем декоратор route, в котором указываем url адрес по которому будет отрабатывать отработчик в виде функции ниже
def about():
	return render_template("about.html") #браузер в ответ на url адрес "/" получит строку "index"
#/ - адрес главной страницы

if __name__ == "__main__": #когда мы запускаем модуль, то директива name как раз принимает значение main и будет запущен локальный веб-сервер для отладки. Если модуль запускается на удаленном сервере, то его запускать не нужно и main будет названием файла, в котором реализована эта программа. Это условие именно для локального веб-сервера. 
	app.run(debug=True) #запуск локального веб-сервера, с параметром debug=true, чтобы мы видели в браузере все ошибки, которые будут возникать при разработке приложения. После полной отработки надо поставить False, чтобы пользователи не видели ошибки

#если по двум адресам следует выполнять один и тот же обработчик, то можно прописать два декоратора друг за другом 

